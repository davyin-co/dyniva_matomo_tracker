<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\dyniva_matomo_tracker\PiwikTracker;
use Drupal\node\NodeInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_ENTITY_TYPE_insert().
 * @param NodeInterface $entity
 */
function dyniva_matomo_tracker_node_insert(NodeInterface $entity) {
  dyniva_matomo_tracker_track_event($entity->bundle(), 'content.create', $entity->id());
  if($entity->hasField('city') && !$entity->city->isEmpty() && $entity->city->entity) {
    $city = $entity->city->entity->label();
    dyniva_matomo_tracker_track_event($entity->bundle(), 'city.content.create', $city);
  }

  if($entity->hasField('tags')) {
    foreach ($entity->tags as $item) {
      dyniva_matomo_tracker_track_event('taxonomy', 'content.tags', $item->entity->label());
    }
  }
}
/**
 * Implements hook_ENTITY_TYPE_update().
 * @param NodeInterface $entity
 */
function dyniva_matomo_tracker_node_update(NodeInterface $entity) {
  dyniva_matomo_tracker_track_event($entity->bundle(), 'content.update', $entity->id());
  if($entity->hasField('tags')) {
    $original = [];
    if(!empty($entity->original)){
      $original = array_column($entity->original->tags->getValue(), 'target_id');
    }
    foreach ($entity->tags as $item) {
      if(!in_array($item->target_id, $original)) {
        dyniva_matomo_tracker_track_event('taxonomy', 'content.tags', $item->entity->label());
      }
    }
  }
}
/**
 * Implements hook_ENTITY_TYPE_insert().
 * @param UserInterface $entity
 */
function dyniva_matomo_tracker_user_insert(UserInterface $entity) {
  $role = '';
  foreach($entity->getRoles() as $rid) {
    if($rid == 'authenticated') continue;
    $role = $rid;
  }
  dyniva_matomo_tracker_track_event('user', 'user.create', $role);
}
/**
 * Implements hook_user_login().
 * @param EntityInterface $entity
 */
function dyniva_matomo_tracker_user_login($account) {
  $role = '';
  foreach($account->getRoles() as $rid) {
    if($rid == 'authenticated') continue;
    $role = $rid;
  }
  dyniva_matomo_tracker_track_event('user', 'user.login', $role);
}
/**
 * Do track event.
 * @param string $category
 * @param string $action
 * @param boolean $name
 * @param boolean $value
 */
function dyniva_matomo_tracker_track_event($category, $action, $name = false, $value = false) {
  $tracker = dyniva_matomo_tracker_get_tracker();
  $tracker->doTrackEvent($category, $action, $name, $value);
}
/**
 * Get piwik tracker.
 * @return \Drupal\dyniva_matomo_tracker\PiwikTracker
 */
function dyniva_matomo_tracker_get_tracker() {
  $config = \Drupal::config('matomo.settings');
  $id = $config->get('site_id');
  $url_http = $config->get('url_http');
  $url = $config->get('url_https');
  if(empty($url)) {
    $url = $url_http;
  }
  $tracker = new PiwikTracker($id, $url . 'piwik.php');
  return $tracker;
}
/**
 * Implements hook_search_api_results_alter().
 * @param \Drupal\search_api\Query\ResultSetInterface $results
 */
function dyniva_matomo_tracker_search_api_results_alter(\Drupal\search_api\Query\ResultSetInterface &$results) {
  $query = $results->getQuery();
  $index_type = $query->getIndex()->getServerInstance()->getBackend()->getBaseId();
  $keys = $query->getKeys();
  $total = $results->getResultCount();
  if($keys) {
    if(!is_array($keys)) {
      $keys = [$keys];
    }
    $exclude = [
      'and',
      'or',
      'AND',
      'OR',
    ];
    $tracker = dyniva_matomo_tracker_get_tracker();
    foreach ($keys as $key) {
      if(in_array($key, $exclude)) continue;
      $tracker->doTrackSiteSearch($key,$index_type,$total);
    }
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Insert JavaScript to the appropriate scope/region of the page.
 */
function dyniva_matomo_tracker_page_attachments(array &$page) {
  $script = 'var _paq = _paq || [];';
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface) {
    $script .= '_paq.push(["trackEvent", "'.$node->bundle().'", "content.view", "'.$node->label().'"]);';
    if($node->hasField('city') && !$node->city->isEmpty() && $node->city->entity) {
      $city = $node->city->entity->label();
      $script .= '_paq.push(["trackEvent", "'.$node->bundle().'", "city.content.view", "'.$city.'"]);';
    }
    // Add tracker code.
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#value' => $script,
      ],
      'matomo_tracking_script2'
    ];
  }
}
